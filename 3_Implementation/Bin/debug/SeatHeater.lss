
bin\Debug\SeatHeater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000276  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000080  00000000  00000000  000002ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000b7  00000000  00000000  0000036d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000615  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000036f  00000000  00000000  00000a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000053f  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000154  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000172  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 34 01 	call	0x268	; 0x268 <main>
  78:	0c 94 39 01 	jmp	0x272	; 0x272 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Activity1>:
#include <util/delay.h>
#include"Activity1.h"

void Activity1()
{
    DDRD &= ~(1<<PD0); //input pin Port D pin 1
  80:	50 98       	cbi	0x0a, 0	; 10
    DDRD &= ~(1<<PD1);  //input pin Port D pin 2
  82:	51 98       	cbi	0x0a, 1	; 10

    //Giving logic HIGH for the input pins/
    PORTD |= (1<<PD0);
  84:	58 9a       	sbi	0x0b, 0	; 11
    PORTD |= (1<<PD1);
  86:	59 9a       	sbi	0x0b, 1	; 11

    /*Giving the output @ pin0 Port B */
    DDRB |= (1<<PB1);
  88:	21 9a       	sbi	0x04, 1	; 4

    if  ( (!(PIND & (1<<PD0))) & (!(PIND & (1<<PD1))) )
  8a:	89 b1       	in	r24, 0x09	; 9
  8c:	99 b1       	in	r25, 0x09	; 9
  8e:	80 fd       	sbrc	r24, 0
  90:	11 c0       	rjmp	.+34     	; 0xb4 <Activity1+0x34>
  92:	91 fd       	sbrc	r25, 1
  94:	0f c0       	rjmp	.+30     	; 0xb4 <Activity1+0x34>
    {
        PORTB |= (1<<PB1);   //Turns on the LED if both the switches are turned on by the user
  96:	29 9a       	sbi	0x05, 1	; 5
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9c:	40 e9       	ldi	r20, 0x90	; 144
  9e:	51 e0       	ldi	r21, 0x01	; 1
  a0:	ca 01       	movw	r24, r20
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <Activity1+0x22>
  a6:	2f 5f       	subi	r18, 0xFF	; 255
  a8:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  aa:	87 e2       	ldi	r24, 0x27	; 39
  ac:	20 31       	cpi	r18, 0x10	; 16
  ae:	38 07       	cpc	r19, r24
  b0:	b9 f7       	brne	.-18     	; 0xa0 <Activity1+0x20>
  b2:	08 95       	ret
        _delay_ms(1000);
    }
    else
    {
       PORTB &= ~(1<<PB1);  //Turns Off the LED
  b4:	29 98       	cbi	0x05, 1	; 5
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	40 e9       	ldi	r20, 0x90	; 144
  bc:	51 e0       	ldi	r21, 0x01	; 1
  be:	ca 01       	movw	r24, r20
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <Activity1+0x40>
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3f 4f       	sbci	r19, 0xFF	; 255
  c8:	87 e2       	ldi	r24, 0x27	; 39
  ca:	20 31       	cpi	r18, 0x10	; 16
  cc:	38 07       	cpc	r19, r24
  ce:	b9 f7       	brne	.-18     	; 0xbe <Activity1+0x3e>
  d0:	08 95       	ret

000000d2 <InitADC>:
#include "Activity2.h"
#define Activity2_h
#include <util/delay.h>
void  InitADC()
{
    ADMUX=(1<<REFS0);
  d2:	80 e4       	ldi	r24, 0x40	; 64
  d4:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA=(1<<ADEN) | (7<<ADPS0);
  d8:	87 e8       	ldi	r24, 0x87	; 135
  da:	80 93 7a 00 	sts	0x007A, r24
}
  de:	08 95       	ret

000000e0 <ReadADC>:
uint16_t ReadADC(uint8_t ch)
{
    ADMUX&=0xf8;
  e0:	90 91 7c 00 	lds	r25, 0x007C
  e4:	98 7f       	andi	r25, 0xF8	; 248
  e6:	90 93 7c 00 	sts	0x007C, r25
    ch=ch&0b00000111;
    ADMUX|=ch;
  ea:	90 91 7c 00 	lds	r25, 0x007C
  ee:	87 70       	andi	r24, 0x07	; 7
  f0:	89 2b       	or	r24, r25
  f2:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA|=(1<<ADSC);
  f6:	80 91 7a 00 	lds	r24, 0x007A
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	80 93 7a 00 	sts	0x007A, r24
    while(!(ADCSRA & (1<<ADIF)));
 100:	80 91 7a 00 	lds	r24, 0x007A
 104:	84 ff       	sbrs	r24, 4
 106:	fc cf       	rjmp	.-8      	; 0x100 <ReadADC+0x20>
    ADCSRA|=(1<<ADIF);
 108:	80 91 7a 00 	lds	r24, 0x007A
 10c:	80 61       	ori	r24, 0x10	; 16
 10e:	80 93 7a 00 	sts	0x007A, r24
    return (ADC);
 112:	20 91 78 00 	lds	r18, 0x0078
 116:	30 91 79 00 	lds	r19, 0x0079
}
 11a:	c9 01       	movw	r24, r18
 11c:	08 95       	ret

0000011e <Activity2>:
#include "Activity2.h"
#define Activity2_h
#include <util/delay.h>
void  InitADC()
{
    ADMUX=(1<<REFS0);
 11e:	80 e4       	ldi	r24, 0x40	; 64
 120:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA=(1<<ADEN) | (7<<ADPS0);
 124:	87 e8       	ldi	r24, 0x87	; 135
 126:	80 93 7a 00 	sts	0x007A, r24
}
uint16_t ReadADC(uint8_t ch)
{
    ADMUX&=0xf8;
 12a:	80 91 7c 00 	lds	r24, 0x007C
 12e:	88 7f       	andi	r24, 0xF8	; 248
 130:	80 93 7c 00 	sts	0x007C, r24
    ch=ch&0b00000111;
    ADMUX|=ch;
 134:	80 91 7c 00 	lds	r24, 0x007C
 138:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA|=(1<<ADSC);
 13c:	80 91 7a 00 	lds	r24, 0x007A
 140:	80 64       	ori	r24, 0x40	; 64
 142:	80 93 7a 00 	sts	0x007A, r24
    while(!(ADCSRA & (1<<ADIF)));
 146:	80 91 7a 00 	lds	r24, 0x007A
 14a:	84 ff       	sbrs	r24, 4
 14c:	fc cf       	rjmp	.-8      	; 0x146 <Activity2+0x28>
    ADCSRA|=(1<<ADIF);
 14e:	80 91 7a 00 	lds	r24, 0x007A
 152:	80 61       	ori	r24, 0x10	; 16
 154:	80 93 7a 00 	sts	0x007A, r24
    return (ADC);
 158:	80 91 78 00 	lds	r24, 0x0078
 15c:	90 91 79 00 	lds	r25, 0x0079
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	40 e9       	ldi	r20, 0x90	; 144
 166:	51 e0       	ldi	r21, 0x01	; 1
 168:	ca 01       	movw	r24, r20
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <Activity2+0x4c>
 16e:	2f 5f       	subi	r18, 0xFF	; 255
 170:	3f 4f       	sbci	r19, 0xFF	; 255
 172:	87 e0       	ldi	r24, 0x07	; 7
 174:	20 3d       	cpi	r18, 0xD0	; 208
 176:	38 07       	cpc	r19, r24
 178:	b9 f7       	brne	.-18     	; 0x168 <Activity2+0x4a>
{
           InitADC();
           uint16_t temp=0;
           temp=ReadADC(0);  //select channel 0
          _delay_ms(200);
}
 17a:	08 95       	ret

0000017c <PWM_init>:
#include<util/delay.h>

void PWM_init(void)
{
    //Configuring the registers and ports/
    TCCR1A|=(1<<COM1A1)|(1<<WGM10)|(1<<WGM11);
 17c:	e0 e8       	ldi	r30, 0x80	; 128
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	83 68       	ori	r24, 0x83	; 131
 184:	80 83       	st	Z, r24
    TCCR1B|=(1<<WGM12)|(1<<CS11)|(1<<CS10);
 186:	e1 e8       	ldi	r30, 0x81	; 129
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	8b 60       	ori	r24, 0x0B	; 11
 18e:	80 83       	st	Z, r24
    DDRB|=(1<<PB1);
 190:	21 9a       	sbi	0x04, 1	; 4

}
 192:	08 95       	ret

00000194 <PWM>:

char PWM (uint16_t ADC_val)
{
 194:	9c 01       	movw	r18, r24
    char temperature;

    if((ADC_val>=0) && (ADC_val<=209)){
 196:	82 3d       	cpi	r24, 0xD2	; 210
 198:	91 05       	cpc	r25, r1
 19a:	a0 f4       	brcc	.+40     	; 0x1c4 <PWM+0x30>

        OCR1A = 205; //20% duty cycle
 19c:	8d ec       	ldi	r24, 0xCD	; 205
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 89 00 	sts	0x0089, r25
 1a4:	80 93 88 00 	sts	0x0088, r24
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	40 e9       	ldi	r20, 0x90	; 144
 1ae:	51 e0       	ldi	r21, 0x01	; 1
 1b0:	ca 01       	movw	r24, r20
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <PWM+0x1e>
 1b6:	2f 5f       	subi	r18, 0xFF	; 255
 1b8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ba:	28 3c       	cpi	r18, 0xC8	; 200
 1bc:	31 05       	cpc	r19, r1
 1be:	c1 f7       	brne	.-16     	; 0x1b0 <PWM+0x1c>
 1c0:	84 e1       	ldi	r24, 0x14	; 20
 1c2:	08 95       	ret
        temperature = 20;
        _delay_ms(20);
    }
    else if((ADC_val>=210) && (ADC_val<=509)){
 1c4:	82 5d       	subi	r24, 0xD2	; 210
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	8c 52       	subi	r24, 0x2C	; 44
 1ca:	91 40       	sbci	r25, 0x01	; 1
 1cc:	a0 f4       	brcc	.+40     	; 0x1f6 <PWM+0x62>

        OCR1A = 410; //40% duty cycle
 1ce:	8a e9       	ldi	r24, 0x9A	; 154
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	90 93 89 00 	sts	0x0089, r25
 1d6:	80 93 88 00 	sts	0x0088, r24
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	40 e9       	ldi	r20, 0x90	; 144
 1e0:	51 e0       	ldi	r21, 0x01	; 1
 1e2:	ca 01       	movw	r24, r20
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <PWM+0x50>
 1e8:	2f 5f       	subi	r18, 0xFF	; 255
 1ea:	3f 4f       	sbci	r19, 0xFF	; 255
 1ec:	28 3c       	cpi	r18, 0xC8	; 200
 1ee:	31 05       	cpc	r19, r1
 1f0:	c1 f7       	brne	.-16     	; 0x1e2 <PWM+0x4e>
 1f2:	89 e1       	ldi	r24, 0x19	; 25
 1f4:	08 95       	ret
        temperature = 25;
       _delay_ms(20);
    }
    else if((ADC_val>=510) && (ADC_val<=709)){
 1f6:	c9 01       	movw	r24, r18
 1f8:	8e 5f       	subi	r24, 0xFE	; 254
 1fa:	91 40       	sbci	r25, 0x01	; 1
 1fc:	88 3c       	cpi	r24, 0xC8	; 200
 1fe:	91 05       	cpc	r25, r1
 200:	a0 f4       	brcc	.+40     	; 0x22a <PWM+0x96>

        OCR1A = 717;//70% duty cycle
 202:	8d ec       	ldi	r24, 0xCD	; 205
 204:	92 e0       	ldi	r25, 0x02	; 2
 206:	90 93 89 00 	sts	0x0089, r25
 20a:	80 93 88 00 	sts	0x0088, r24
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	40 e9       	ldi	r20, 0x90	; 144
 214:	51 e0       	ldi	r21, 0x01	; 1
 216:	ca 01       	movw	r24, r20
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <PWM+0x84>
 21c:	2f 5f       	subi	r18, 0xFF	; 255
 21e:	3f 4f       	sbci	r19, 0xFF	; 255
 220:	28 3c       	cpi	r18, 0xC8	; 200
 222:	31 05       	cpc	r19, r1
 224:	c1 f7       	brne	.-16     	; 0x216 <PWM+0x82>
 226:	8d e1       	ldi	r24, 0x1D	; 29
 228:	08 95       	ret
        temperature = 29;
        _delay_ms(20);
    }
    else if((ADC_val>=710) && (ADC_val<=1024)){
 22a:	26 5c       	subi	r18, 0xC6	; 198
 22c:	32 40       	sbci	r19, 0x02	; 2
 22e:	2b 53       	subi	r18, 0x3B	; 59
 230:	31 40       	sbci	r19, 0x01	; 1
 232:	a0 f4       	brcc	.+40     	; 0x25c <PWM+0xc8>

        OCR1A = 973; //95% duty cycle
 234:	8d ec       	ldi	r24, 0xCD	; 205
 236:	93 e0       	ldi	r25, 0x03	; 3
 238:	90 93 89 00 	sts	0x0089, r25
 23c:	80 93 88 00 	sts	0x0088, r24
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 e9       	ldi	r20, 0x90	; 144
 246:	51 e0       	ldi	r21, 0x01	; 1
 248:	ca 01       	movw	r24, r20
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <PWM+0xb6>
 24e:	2f 5f       	subi	r18, 0xFF	; 255
 250:	3f 4f       	sbci	r19, 0xFF	; 255
 252:	28 3c       	cpi	r18, 0xC8	; 200
 254:	31 05       	cpc	r19, r1
 256:	c1 f7       	brne	.-16     	; 0x248 <PWM+0xb4>
 258:	81 e2       	ldi	r24, 0x21	; 33
 25a:	08 95       	ret
        temperature = 33;
        _delay_ms(20);
    }
    else{
        OCR1A = 0; //0% output
 25c:	10 92 89 00 	sts	0x0089, r1
 260:	10 92 88 00 	sts	0x0088, r1
 264:	80 e0       	ldi	r24, 0x00	; 0
        temperature = 0;
    }
    return temperature;
}
 266:	08 95       	ret

00000268 <main>:
#include"Activity3.h"
int main(void)
{
    while(1)
    {
        Activity1();
 268:	0e 94 40 00 	call	0x80	; 0x80 <Activity1>
        Activity2();
 26c:	0e 94 8f 00 	call	0x11e	; 0x11e <Activity2>
 270:	fb cf       	rjmp	.-10     	; 0x268 <main>

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
